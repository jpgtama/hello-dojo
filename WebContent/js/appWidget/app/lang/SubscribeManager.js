/**
* define centralized topics to solve the problems of subscribe one topic repeatly.
* all the subscribers need two more parameters, the instance name and a token.
* the token will be generated by router go function and will be set to every controller invoked in the chain
*/

define([
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/string',
    'app/lang/topic',
    'app/lang/TokenHolder'
], function(declare, lang, string, topic, TokenHolder) {

    var SubscribeManager = declare('app.lang.SubscribeManager', [], {

        /**
        * key: instance name + '|' + token + '|' + classId
        * value: [{
        *       handle:     [the handle of subscribe], 
        *       topicName:  [the topicName of subscribe], 
        *       callback:   [the callback function of subscribe] 
        * }]
        */
        subscribeHandlers: {}, 

        constructor: function(/*Object*/ options) {
            lang.mixin(this, options);

            var _this = this;
            TokenHolder.watch('token', function(name, oldValue, value) {
                if (oldValue == value) return;

                _this.replaceToken(value);
            });
        },

        addSubscribe: function(/*String*/ topicName, /*String*/ instanceName, /*int*/ classId, /*Function*/ callback) {
            var handler = topic.subscribe(topicName, callback);

            var key = instanceName + '|' + TokenHolder.get('token') + '|' + classId;
            var handlers = this.subscribeHandlers[key];
            if (!handlers) {
                handlers = [];
                this.subscribeHandlers[key] = handlers;
            }

            handlers.push({
                handle: handler,
                topicName: topicName,
                callback: callback
            });

            // console.log('addSubscribe: ', this.subscribeHandlers);
        },

        /**
        * replace all the subscribes from old token to new one
        */
        replaceToken: function(/*String*/ newToken) {
            // console.log('replaceToken before: ', this.subscribeHandlers);
            for (var key in this.subscribeHandlers) {
                var keys = key.split('|');
                if (keys[1] == newToken) continue;

                //replace the token to new one.
                var newKey = key.replace(/\|[^\s\!]+\|/g, '|' + newToken + '|');

                this.subscribeHandlers[newKey] = this.subscribeHandlers[key];
                delete this.subscribeHandlers[key];
            }
            // console.log('replaceToken after: ', this.subscribeHandlers);
        },

        /**
        * clear all the subscribes for the specified instance. 
        * if the token is same as current token, then will not be removed.
        * <<params>> 
        * instanceName: the instance declare class name
        * withToken: to judge if the subscribes nned to be removed with instance name or instance name plus token
        */
        clearSubscribe: function(/*String*/ instanceName, /*int*/ classId, /*Boolean*/ withToken) {
            var token = TokenHolder.get('token');
            for (var key in this.subscribeHandlers) {
                var keys = key.split('|');
               // if (withToken && keys[1] == token) continue;
                if (keys[0] == instanceName) { // && keys[2] == classId) {
                    var handlers = this.subscribeHandlers[key];
                    for (var i in handlers) {
                        handlers[i].handle.remove();
                    }
                    handlers = [];
                    delete this.subscribeHandlers[key];
                }
            }
        }        

    });

    return new SubscribeManager();
});